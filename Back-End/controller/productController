

const getProducts = async (req, res, next) => {

    try {

        const allProducts = await Product.find();
        if (!allProducts || allProducts.length === 0) {
            return res.status(404).send("Products not found");
        }
        res.status(200).json(allProducts);
    }
    catch (error) {

        res.status(500).send("Server Error");
    }
}

const createProduct = async (req, res) => {
    try
    {
        const {name, productUrl, currentPrice, targetPrice, description, category} = req.body;

        if(!name || !productUrl || !currentPrice || !targetPrice || !category){

            return res.status(400).send("Invalid product data");

        }

        const newProduct = new Product(req.body);

        const savedProduct =  await newProduct.save();

        res.status(201).json({
            message: "Product created successfully",
            product: savedProduct
        });

    }
    catch (error)
    {
        res.status(500).send("Server Error");
    }
}


const updateProduct = async (req, res) => {

    try{
        const {id:_id} = req.params;
        const updatedProduct = await Product.findByIdAndUpdate(_id, req.body,{new: true});

        if(!updatedProduct){
            return res.status(404).send("Product not found");
        }

        res.status(200).json(updatedProduct);
    }
    catch(error){
        res.status(500).send("Server Error");
    }
}

const deleteProduct = async (req, res) => {

    try{
        const {id:_id} = req.params;
        const deletedProduct = await Product.findByIdAndDelete(_id);

        if(!deletedProduct){
            return res.status(404).send("Product not found");
        }
        res.status(200).send("Product deleted successfully");
    }
    catch(error){
        res.status(500).send("Server Error");
    }
}


const searchProduct = async (req, res) => {

    try{

        const {name} = req.params;
        const product = await Product.findOne({name});
        if(!product){
            return res.status(404).send("Product not found");
        }
        res.status(200).json(product);

    }
    catch(error){

        res.status(500).send("Server Error");
    }
}

const sortByDate = async (req, res) => {

    try{

        const products = await Product.find().sort({createdAt: -1});
        res.status(200).json(products);

    }
    catch(error){
        res.status(500).send("Server Error");
    }
}

const sortByPrice = async (req, res) => {

    try{

        const products = await Product.find().sort({currentPrice: -1});
        res.status(200).json(products);

    }
    catch(error){
        res.status(500).send("Server Error");
    }
}

const filterByPriority = async (req, res) => {
    try {
        const { priority } = req.params;
        const validPriorities = ['High', 'Medium', 'Low'];
        
        if (!validPriorities.includes(priority)) {
            return res.status(400).send("Invalid priority. Must be High, Medium, or Low.");
        }

        const products = await Product.find({ priority });
        res.status(200).json(products);
    } catch (error) {
        res.status(500).send("Server Error");
    }
}


module.exports = {
    getProducts, createProduct, updateProduct, deleteProduct, searchProduct, sortByDate, sortByPrice, filterByPriority
}

